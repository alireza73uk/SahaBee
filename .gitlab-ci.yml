stages:
  - prepare
  - build
  - test
  - analysis
  - release
  - deploy

variables:
  IMAGE_PREFIX: "registry.gitlab.com/emran.bm/sahabee"
  API_IMAGE_NAME: "${IMAGE_PREFIX}/api"
  FRONTEND_IMAGE_NAME: "${IMAGE_PREFIX}/frontend"
  API_IMAGE_RELEASE_VERSION: "0.3.1"
  FRONTEND_IMAGE_RELEASE_VERSION: "${CI_COMMIT_SHA}"
  SNAPSHOT_VERSION: "snapshot-${CI_COMMIT_SHA}"


build:
  stage: build
  image: docker/compose:1.25.4
  services:
    - docker:19.03.5-dind
  tags:
    - docker
  before_script:
    - export API_VERSION=$SNAPSHOT_VERSION
    - export FRONTEND_VERSION=$SNAPSHOT_VERSION
  script:
    - ci-utils/docker-login.sh
    - docker-compose build
    - docker-compose push
  except:
    - schedules

export-logo:
  stage: build
  image:
    name: dpokidov/imagemagick:7.0.11-13
    entrypoint: [""]
  tags:
    - docker
  script:
    - cd visual-identity/
    - convert logo.psd[0] logo.png
    - convert logo.psd[1] logo-black.png
  artifacts:
    paths:
      - visual-identity/logo.png
      - visual-identity/logo-black.png

test-api:
  stage: test
  image: docker/compose:1.25.4
  services:
    - docker:19.03.5-dind
  tags:
    - docker
  before_script:
    - export API_VERSION=$SNAPSHOT_VERSION
    - export FRONTEND_VERSION=$SNAPSHOT_VERSION
  variables:
    COMPOSE_INTERACTIVE_NO_CLI: 'true'
  script:
    - ci-utils/docker-login.sh
    - docker-compose pull api
    - docker-compose run --name test_container api sh -c 'DJANGO_SETTINGS_MODULE=sahabee.settings ./manage.py test'
    - docker cp test_container:/sahabee/.coverage .
    - docker cp test_container:/sahabee/coverage.xml .
    - sed -i 's/\/sahabee/backend/g' coverage.xml # Update source path according to the current directory structure
  artifacts:
    reports:
      cobertura: .coverage
    paths:
      - coverage.xml
  needs:
    - build
  except:
    - schedules

test-ansible:
  stage: test
  tags:
    - docker
  image: spy86/ansible:latest
  services:
    - name: rastasheep/ubuntu-sshd:18.04
      alias: sahabee.ir
  script:
    - DNS_SERVER=`cat /etc/resolv.conf | grep -m 1 nameserver | cut -d' ' -f2`
    - cd deployment/ansible/
    - sshpass -p root
      ssh -o StrictHostKeyChecking=no
      root@sahabee.ir
      bash -c "echo 'echo \$@' > /bin/systemctl" # Mock systemctl
    - ansible-playbook infra.yml -i inventory.yml -vvv
      --limit test
      --extra-vars "shecan_dns_1=$DNS_SERVER shecan_dns_2=$DNS_SERVER"
    - ansible-playbook deploy.yml -i inventory.yml -vvv --limit test
    - curl -i --fail https://sahabee.ir
    - curl -i --fail https://api.sahabee.ir
    - ansible-playbook backup.yml -i inventory.yml -vvv --limit test
    - ansible-playbook restore.yml -i inventory.yml -vvv --limit test
  only:
    changes:
      - deployment/ansible/*
  except:
    - schedules

release:
  stage: release
  image: docker/compose:1.25.4
  services:
    - docker:19.03.5-dind
  tags:
    - docker
  before_script:
    - export API_VERSION=$SNAPSHOT_VERSION
    - export FRONTEND_VERSION=$SNAPSHOT_VERSION
  script:
    - ci-utils/docker-login.sh
    - docker-compose pull api frontend
    - docker tag ${API_IMAGE_NAME}:${API_VERSION} ${API_IMAGE_NAME}:${API_IMAGE_RELEASE_VERSION}
    - docker tag ${FRONTEND_IMAGE_NAME}:${FRONTEND_VERSION} ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_RELEASE_VERSION}
    - docker push ${API_IMAGE_NAME}:${API_IMAGE_RELEASE_VERSION}
    - docker push ${FRONTEND_IMAGE_NAME}:${FRONTEND_IMAGE_RELEASE_VERSION}
  only:
    refs:
      - master
  except:
    - schedules

setup-infra:
  stage: deploy
  tags:
    - docker
  image: spy86/ansible:latest
  script:
    - cd deployment/ansible/
    - ansible-playbook infra.yml -i inventory.yml --limit production
  when: manual
  only:
    refs:
      - master
  except:
    - schedules

deploy:
  stage: deploy
  tags:
    - docker
  image: spy86/ansible:latest
  script:
    - cd deployment/ansible/
    - ansible-playbook deploy.yml -i inventory.yml --limit production
  artifacts:
    paths:
      - deployment/ansible/smoke-test-result.txt
    when: on_failure
    expire_in: 1 week
  only:
    refs:
      - master
  environment:
    name: production
    url: https://sahabee.ir
  except:
    - schedules

clean-gitlab-registry:
  tags:
    - docker
  image: nyurik/alpine-python3-requests
  script:
    - ./ci-utils/clean-docker-registry.py
      --project-id ${CI_PROJECT_ID}
      --access-token ${DOCKER_REGISTRY_CLEAN_JOB_API_TOKEN}
      --repo ${API_IMAGE_NAME}
      --prefix "snapshot-"
    - ./ci-utils/clean-docker-registry.py
      --project-id ${CI_PROJECT_ID}
      --access-token ${DOCKER_REGISTRY_CLEAN_JOB_API_TOKEN}
      --repo ${FRONTEND_IMAGE_NAME}
      --prefix "snapshot-"
  only:
    - schedules

sonarcloud-analysis:
  stage: analysis
  needs:
    - job: test-api
      artifacts: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.projectVersion=${CI_COMMIT_SHA}
  only:
    - master

backup-production:
  stage: deploy
  tags:
    - docker
  image: spy86/ansible:latest
  script:
    - cd deployment/ansible/
    - ansible-playbook backup.yml -i inventory.yml --limit production
    - echo "${PRODUCTION_BACKUP_FILE_PASS}" | openssl enc -in backup.json -aes-256-cbc -pass stdin > backup.json.enc
  artifacts:
    expire_in: 30 days
    paths:
      - deployment/ansible/backup.json.enc
  only:
    refs:
      - master

restore-backup-to-production:
  stage: prepare
  image: spy86/ansible:latest
  script:
    - if [ -z "$BACKUP_FILE_URL" ]; then
    - echo 'ERROR>> Provide BACKUP_FILE_URL env var'
    - exit 1
    - fi
    - cd deployment/ansible/
    - wget -o backup.json.enc "$BACKUP_FILE_URL"
    - echo "${PRODUCTION_BACKUP_FILE_PASS}" | openssl enc -in backup.json.enc -d -aes-256-cbc -pass stdin > backup.json
    - ansible-playbook restore.yml -i inventory.yml --limit production
  only:
    refs:
      - master
  when: manual
