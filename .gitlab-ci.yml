stages:
  - prepare
  - build
  - test
  - release
  - deploy

variables:
  API_IMAGE_NAME: "registry.gitlab.com/emran.bm/sahabee/api"
  API_IMAGE_RELEASE_VERSION: "0.3.1"
  DEPLOYMENT_DOCKER: "registry.gitlab.com/emran.bm/sahabee/deployment-controller:0.3.0"
  SNAPSHOT_VERSION: "snapshot-${CI_COMMIT_SHA}"

create-deployment-image:
  stage: prepare
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  tags:
    - docker
  script:
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin registry.gitlab.com
    - cd deployment/
    - docker build -t $DEPLOYMENT_DOCKER .
    - docker push $DEPLOYMENT_DOCKER
  when: manual
  except:
    - schedules

add-public-key-to-machines:
  stage: deploy
  tags:
    - docker
  image: $DEPLOYMENT_DOCKER
  script:
    - cd deployment/
    - cp ~/.ssh/id_rsa.pub .
    - ./add-public-key.sh
      --server $SSH_PROXY_IP
      --user $SSH_PROXY_SERVER_USER
      --pass $SSH_PROXY_SERVER_PASS
      --no-check-fingerprint
    - scp ./add-public-key.sh ./id_rsa.pub ${SSH_PROXY_SERVER_USER}@${SSH_PROXY_IP}:/tmp/
    - ssh ${SSH_PROXY_SERVER_USER}@${SSH_PROXY_IP} "/tmp/add-public-key.sh --server $SERVER_PROD_IP --user $SERVER_PROD_USER --pass $SERVER_PROD_PASS --no-check-fingerprint"
  when: manual
  only:
    refs:
      - master
  except:
    - schedules

build:
  stage: build
  image: docker/compose:1.25.4
  services:
    - docker:19.03.5-dind
  tags:
    - docker
  before_script:
    - export API_VERSION=$SNAPSHOT_VERSION
  script:
    - docker-compose build
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin registry.gitlab.com
    - echo $API_VERSION
    - docker-compose push
  except:
    - schedules

test:
  stage: test
  image: docker/compose:1.25.4
  services:
    - docker:19.03.5-dind
  tags:
    - docker
  before_script:
    - export API_VERSION=$SNAPSHOT_VERSION
  variables:
    COMPOSE_INTERACTIVE_NO_CLI: 'true'
  script:
    - docker-compose pull api
    - docker-compose run --name test_container api ./manage.py test
    - docker cp test_container:/sahabee/.coverage .
  artifacts:
    reports:
      cobertura: .coverage
  except:
    - schedules

test-ansible:
  stage: test
  tags:
    - docker
  image: $DEPLOYMENT_DOCKER
  services:
    - name: rastasheep/ubuntu-sshd:18.04
      alias: sahabee.ir
  script:
    - DNS_SERVER=`cat /etc/resolv.conf | grep -m 1 nameserver | cut -d' ' -f2`
    - cd deployment/ansible/
    - ansible-playbook infra.yml -i inventory.yml -vvv --limit test --extra-vars "shecan_dns_1=$DNS_SERVER shecan_dns_2=$DNS_SERVER"
    - ansible-playbook deploy.yml -i inventory.yml -vvv --limit test --extra-vars "api_version=$SNAPSHOT_VERSION"
    - curl -i --fail https://sahabee.ir
  only:
    changes:
      - deployment/ansible/*
      - .gitlab-ci.yml
  except:
    - schedules

release:
  stage: release
  image: docker/compose:1.25.4
  services:
    - docker:19.03.5-dind
  tags:
    - docker
  before_script:
    - export API_VERSION=$SNAPSHOT_VERSION
  script:
    - echo $API_VERSION
    - docker-compose pull api
    - docker tag ${API_IMAGE_NAME}:${API_VERSION} ${API_IMAGE_NAME}:${API_IMAGE_RELEASE_VERSION}
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin registry.gitlab.com
    - docker push ${API_IMAGE_NAME}:${API_IMAGE_RELEASE_VERSION}
  only:
    refs:
      - master
  except:
    - schedules

setup-infra:
  stage: deploy
  tags:
    - docker
  image: $DEPLOYMENT_DOCKER
  script:
    - cd deployment/ansible/
    - ansible-playbook infra.yml -i inventory.yml -vvv --limit production
  when: manual
  only:
    refs:
      - master
  except:
    - schedules

deploy:
  stage: deploy
  tags:
    - docker
  image: $DEPLOYMENT_DOCKER
  script:
    - cd deployment/ansible/
    - ansible-playbook deploy.yml -i inventory.yml -vvv --limit production
  artifacts:
    paths:
      - deployment/ansible/smoke-test-result.txt
    when: on_failure
    expire_in: 1 week
  only:
    refs:
      - master
  environment:
    name: production
    url: https://sahabee.ir/admin
  except:
    - schedules

clean-gitlab-registry:
  tags:
    - docker
  image: nyurik/alpine-python3-requests
  script:
    - ./ci-utils/clean-docker-registry.py
      --project-id ${CI_PROJECT_ID}
      --access-token ${DOCKER_REGISTRY_CLEAN_JOB_API_TOKEN}
      --repo ${API_IMAGE_NAME}
      --prefix "snapshot-"
  only:
    - schedules

